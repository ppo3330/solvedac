//bfs 이므로 O(n*m)
//bfs에서 네방향 방문 방식direc 기억하기, bfs 기억하기
//dfs로 할 경우 최단 거리가 아님.
//처음에는 백트래킹 dfs(더 좋은거 발견시 수정)을 이용해보려고 했으나 그 경우 재귀호출이 너무 많이 일어나게 됨. <- 이론상 가능은 하나 시간 메모리 등 문제


#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

int n, m;
int aimx, aimy;
vector<vector<int>> arr;
vector<vector<bool>> visit;
int direcx[4] = { 0,0,1,-1 };
int direcy[4] = { 1,-1,0,0 };


void bfs(int x, int y) {
	queue<pair<int, int>> q;
	arr[x][y] = 0;
	visit[x][y] = true;
	q.push({ x,y });
	while (!q.empty()) {
		int frontx = q.front().first;
		int fronty = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int dx = frontx + direcx[i];
			int dy = fronty + direcy[i];

			if (dx >= 0 && dx < n && dy >= 0 && dy < m) {
				if (visit[dx][dy] == false && arr[dx][dy] != 0) {
					arr[dx][dy] = arr[frontx][fronty] + 1;
					visit[dx][dy] = true;
					q.push({ dx, dy });
				}
			}
		}
	}
}


int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	cin >> n >> m;
	arr.assign(n, vector<int>(m, 0));
	visit.assign(n, vector<bool>(m, 0));

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> arr[i][j];
			visit[i][j] = false;
			if (arr[i][j] == 2) {
				aimx = i;
				aimy = j;
			}
		}
	}

	bfs(aimx, aimy);

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (visit[i][j] == false && arr[i][j] != 0)
				cout << -1 << ' ';
			else
				cout << arr[i][j] << ' ';
		}
		cout << '\n';
	}

}
