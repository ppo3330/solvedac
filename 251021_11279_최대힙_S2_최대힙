//O(N log N)
//최대힙 기억하기. priority queue사용해도 될듯?
#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

#define MAXHEAP 100001

typedef struct {
	int key;
}element;

typedef struct{
	element heap[MAXHEAP];
	int heap_size;
}HeapType;

void insert_max_heap(HeapType* h, element item) {
	int i;
	i = ++(h->heap_size);

	while ((i != 1) && (item.key) > h->heap[i / 2].key) {
		h->heap[i] = h->heap[i / 2];
		i /= 2;
	}
	h->heap[i] = item;
}

element delete_max_heap(HeapType* h) {
	int parent, child;
	element item, temp;

	item = h->heap[1];
	temp = h->heap[(h->heap_size)--];
	parent = 1;
	child = 2;

	while (child <= h->heap_size) {
		if ((child < h->heap_size) && (h->heap[child].key < h->heap[child + 1].key)) {
			child++;
		}
		if (temp.key >= h->heap[child].key) {
			break;
		}
		h->heap[parent] = h->heap[child];
		parent = child;
		child *= 2;
	}
	h->heap[parent] = temp;

	return item;

}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	int N;
	cin >> N;
	vector<int> result;

	HeapType h;
	h.heap_size = 0;
	for (int i = 0; i < N; i++) {
		int a;
		element e;
		cin >> a;
		e.key = a;
		if (a != 0)
			insert_max_heap(&h, e);
		else if (h.heap_size == 0)
			result.push_back(0);
		else
			result.push_back(delete_max_heap(&h).key);
	}

	for (int i = 0; i < result.size(); i++) {
		cout << result[i] << "\n";
	}
}
